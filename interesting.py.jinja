#!/usr/bin/python3

import sys
import os
import subprocess
import tempfile
import time
import socket
from contextlib import closing
import time
import signal

DIFFERENTIAL_TEST_TIMEOUT_MULTIPLIER = 5
MUTATATED_BIN_DEFAULT_TIMEOUT_SECONDS = 30

def stop_pgctl(_signo, _stack_frame):
    sys.exit(0)

signal.signal(signal.SIGTERM, stop_pgctl)
signal.signal(signal.SIGINT, stop_pgctl)
signal.signal(signal.SIGQUIT, stop_pgctl)


def find_free_port():
    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as s:
        s.bind(('', 0))
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        return s.getsockname()[1]

port = find_free_port()
print(port)

mutant = {{ mutation_id }}
source = '{{ source }}'

with open('testcase.log', 'rb') as f:
    statements = f.read()
    # This ensure creduce produced test case alwats end with ';'
    while statements[-1] != 59:
        statements = statements[:-1]

env_copy = os.environ.copy()
env_copy["PGPORT"] = str(port)
env_copy['LD_LIBRARY_PATH'] = os.path.abspath(os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'lib'))

with tempfile.TemporaryDirectory() as temp_data_dir:
    # Create new postgres database cluster
    initdb_proc = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'initdb'), '-D', temp_data_dir], env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if initdb_proc.returncode != 0:
        print('InitDB(Ref) Fail:', source)
        print(initdb_proc.stderr.decode())
        exit(7)

    # Start postgres server process
    pg_ctl_proc = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'pg_ctl'), '-D', temp_data_dir, '-l', f'{temp_data_dir}/logfile', 'start'], env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if pg_ctl_proc.returncode != 0:
        print('PG_CTL(Ref) Fail:', source)
        print(pg_ctl_proc.stderr.decode())
        exit(6)
    else:
        print(pg_ctl_proc.stdout.decode())

    # Create `test` database
    createdb_proc = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'createdb'), 'test'], env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if createdb_proc.returncode != 0:
        print('Createdb(Ref) Fail:', source)
        print(createdb_proc.stderr.decode())
        exit(5)

    # Launch PSQL
    time_start = time.time()
    psql_proc_ref = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'psql'), 'test'], input=statements, env=env_copy,stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    time_end = time.time()
    time_base = time_end - time_start

    # Stop postgres server process
    pg_ctl_stop_proc = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'pg_ctl'), '-D', temp_data_dir, 'stop', '-m', 'immediate'], env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    print(pg_ctl_stop_proc.stdout.decode())
    if pg_ctl_stop_proc.returncode != 0:
        print('Stop(Ref) Fail:', source)
        exit(8)

env_copy['DREDD_ENABLED_MUTATION'] = str(mutant)
env_copy["PGPORT"] = str(port)

with tempfile.TemporaryDirectory() as temp_data_dir:
    # Create new postgres database cluster
    initdb_proc = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'initdb'), '-D', temp_data_dir], env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=MUTATATED_BIN_DEFAULT_TIMEOUT_SECONDS)
    if initdb_proc.returncode != 0:
        print('InitDB(Mut) Fail:', source)
        print(initdb_proc.stderr.decode())
        exit(4)

    # Start postgres server process
    pg_ctl_proc = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'pg_ctl'), '-D', temp_data_dir, '-l', f'{temp_data_dir}/logfile', 'start'], env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=MUTATATED_BIN_DEFAULT_TIMEOUT_SECONDS)
    if pg_ctl_proc.returncode != 0:
        print('PG_CTL(Mut) Fail:', source)
        print(pg_ctl_proc.stderr.decode())
        exit(3)
    else:
        print(pg_ctl_proc.stdout.decode())

    # Create `test` database
    createdb_proc = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'createdb'), 'test'], env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=MUTATATED_BIN_DEFAULT_TIMEOUT_SECONDS)
    if createdb_proc.returncode != 0:
        print('Createdb(Mut) Fail:', source)
        print(createdb_proc.stderr.decode())
        exit(2)

    # Launch PSQL
    psql_proc_mut = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'psql'), 'test'], input=statements, env=env_copy,stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=time_base*DIFFERENTIAL_TEST_TIMEOUT_MULTIPLIER)

    # Stop postgres server process
    pg_ctl_stop_proc = subprocess.run([os.path.join('{{ mutation_installation_path }}', 'usr', 'local', 'pgsql', 'bin', 'pg_ctl'), '-D', temp_data_dir, 'stop', '-m', 'immediate'], env=env_copy, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=MUTATATED_BIN_DEFAULT_TIMEOUT_SECONDS)
    if pg_ctl_stop_proc.returncode != 0:
        print('Stop(Mut) Fail:', source)
    else:
        print(pg_ctl_stop_proc.stdout.decode())


if psql_proc_ref.returncode == psql_proc_mut.returncode and psql_proc_ref.stdout == psql_proc_mut.stdout and psql_proc_ref.stderr == psql_proc_mut.stderr:
    exit(1)


exit(0)
